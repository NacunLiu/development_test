MVC: model-view-controller
shell-bash: a=1去定义变量，区分大小写且不允许有空格
使用echo 表示输出 $+变量名表示引用变量里面的内容： echo $a
单引号''与双引号""的区别'hello $a'中不会引用变量a中的内容而是直接输出 ""会引用a的内容1
定义数组使用 a=(1 2 3)的方法 不同元素直接用空格隔开，不需要使用","
打印数组所有内容使用echo ${a[*]} 打印数组的长度使用在变量名前添加# echo ${#a[*]}
数组表示的是内存中一块连续的区域存储的内容，因此一个字符串也是一样的效果
反引号``用于表示执行命名的结果 比如 echo a=`ls`就是将ls这条命令的执行结果赋值给a并且打印
对于array=(`ls`)会将ls命令列出来的每一个文件单独存为一个元素
数组也可以使用切片比如 echo ${a[-1]}输出数组中的最后一个元素 echo ${a[-2]}输出倒数第二个元素
((a=a+1)) ((a++/--)) ((a*/b)) 使用双括号对变量进行运算或者判断
使用 echo $? 查看上一条语句的运行结果比如查看比较运算的结果， 只有返回0才是正确的true其他任何值都是false
字符串也可以切片比如s="hello from testhome" 那么echo ${s:6}表示从第6个开始输出 from testhome
如果是 echo ${s:6:3}从6开始向后输出3个 fro
字符串也可以像数组一样使用#获取长度 echo ${#s}
字符串中使用#还可以删除内容，把#放在变量前面看长度，放在后面进行删除 ${s#hello}#放在s的后面，删除字符串中#之后的内容
匹配字符串删除内容： echo ${s#*m} 从头开始匹配到第一个m之后开始输出，之前的内容全部不要： hello from testhome  输出  testhome
#的匹配模式是从头开始匹配到相同的然后把之前的干掉
##两个井号是贪婪匹配，一直匹配到最后一个相同的然后把之前的全部干掉
%与井号相反，是匹配到相同的之后把后面的全部干掉，只保留相同的以前的
寻找模式一个是从前往后一个是从后往前
字符串的替换/被替换掉的内容/新的内容 echo ${s/from/to}
判断： 所有的算数判断必须放在[]中进行 而且中阔好和要比较的内容中间一定要有一个空格 [ 2 -eq 2 ]; $?
算数判断关系： -eq 等于 -ne 不等于 -ge大于等于 -le小于等于 -gt大于 -lt小于
-a 并且 [ 2 -ge 1 -a 3 -le 4 ] 2大于等于1并且3小于等于4
-o 或者
逻辑控制语句： if [ a>2 ]; then b="a is greater than 2";fi
对于()，[]和{}的使用，在对变量进行操作，无论是赋值，运算或者比较的时候都在(())内进行，可以省略$
对于数值比较或者其他逻辑比较，在[]内进行但是如果涉及到变量还是需要加上$
对于字符串的操作在{}内进行，比如切片，替换等
&&与 ||或
循环结构， 与C++的结构比较相近：for ((i=0;i<10;i++)); do echo $i; done 只不过多了一些关键词的 for do done结构
遍历循环结构： for x in ${array[*]}; do echo $x; done
while 循环 i=0; while [ $i -lt 3 ]; do echo $i; ((i=i+1)); done
while循环的一个技巧，在读取文件内容的时候可以一行一行的读取 while read line; do echo $line; done < file.txt
">"输出重定向：echo "new contente" > test.txt 将本来输出到屏幕的内容重新定向输出到test文件中去
"<"输入重定向： done < test.txt 将文件内容输入到while循环中去
对于">"和"<"箭头指向哪里就将内容输出到哪里
循环控制：退出 break和continue
-d 判断一个对象是不是目录 dir
举例：打印当前目录中的所有子文件，如果遇到目录则退出
for f in *; do echo $f; if [ -d $f ]; then break; fi; doneech
打印当前进程号 echo $$
可以在一个bash中再开一个bash, 使用bash命令 然后再使用 echo $$查看进程号和之前就不一样了
使用 exit命令退出内部bash，再使用 echo $$查看
当我们在(a=1)进行操作变量的时候是开启了一个子shell，当括号内的操作进行完，它的生命周期就结束了，无法再在主shell内引用
比如 a=ooooo; echo $a;  (a=1); echo $a 结果还是ooooo
ps 查看进程
sleep 10 & 放到后台去运行，此时可以继续执行其他任务
jobs可以进行查看进程
Ctrl + z 在前台暂停进程  可以使用fg + jobs获得的后台数字将后台进程调进前台，再使用bg + jobs获得的后台数字 调入后台继续运行
比如： sleep 60&; sleep 120&开启了两个后台运行程序，再通过jobs查看它们的状态和号码，然后 fg+数字调入前台
ctrl+z暂停，之后jobs再查看，之后再通过bg+数字放入后台继续运行
添加环境变量的意义是在任何一个目录任何一个位置都可以执行添加到环境变量的程序，不需要提供路径或者刻意的去找
如果没有添加环境变量就需要先切换到程序所在目录才能运行
